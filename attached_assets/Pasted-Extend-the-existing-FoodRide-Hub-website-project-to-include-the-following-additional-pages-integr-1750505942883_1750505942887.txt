Extend the existing ‘FoodRide Hub’ website project to include the following additional pages, integrating them with the current Homepage structure. Ensure all pages are fully functional, responsive, and styled consistently with the existing design (using Tailwind CSS, orange #FF6347 for food, blue #4682B4 for rides, and #F5F5F5 background). Use the same tech stack (React.js with Vite, Node.js with Express.js, Replit database) and maintain security, performance, and SEO best practices as in the original setup. Add the following:Food Ordering Section:A page with a restaurant listing grid (filters for cuisine, price, delivery time) and a search bar.A detailed menu page for each restaurant with item images, descriptions, customization options (e.g., toppings, sizes via dropdowns), and an ‘Add to Cart’ button.A cart sidebar or page with real-time updates, allowing item modification/removal and a ‘Checkout’ button using Stripe API (mock payments if live API not configured).Real-time order tracking using WebSocket (or mock updates if WebSocket unavailable).Link this section from the Homepage ‘Order Food Now’ CTA.Ride Booking Section:A page with a Google Maps API-integrated map, input fields for pickup and drop-off locations (with autocomplete), and vehicle type toggles (economy, premium, shared rides).A fare calculator based on distance and vehicle type, displayed in real-time.A driver tracking panel using WebSocket (or mock data if unavailable) with estimated arrival times.Link this section from the Homepage ‘Book a Ride’ CTA.User Account Dashboard:A page with secure user authentication (using Replit Auth or mock login if unavailable) and a tabbed interface for ‘Profile’ (editable name, address), ‘Order History’ (list with statuses), and ‘Loyalty’ (points balance and redemption options).Store user data in the Replit database (or mock JSON if unavailable).Include a notification area for order/ride updates.Add a login/signup link in the Homepage header.Contact and Support Page:A page with a contact form (name, email, message with validation) submitting to a backend endpoint (log to console or database if live submission not possible).An FAQ section with collapsible answers.An optional mock chat widget (e.g., static placeholder if API not configured).Link this page from the Homepage navigation.Integration Requirements:Update the Homepage navigation bar to include links to all new pages (e.g., ‘Order Food,’ ‘Book Ride,’ ‘Dashboard,’ ‘Contact’).Ensure routing between pages using React Router for seamless navigation.Maintain responsive design with mobile-first breakpoints and a sticky header.Reuse existing components (e.g., search bar, CTAs) where applicable to ensure consistency.Add comments in the code to explain new page structures and ensure a README is updated with setup instructions for the expanded project.Additional Notes:If any feature (e.g., WebSocket, Stripe, Google Maps) is not functional due to free plan limitations, implement mock versions (e.g., static tracking data, dummy payment forms).Start with the Food Ordering Section, then add Ride Booking, Dashboard, and Contact pages incrementally.Provide debug logs if errors occur and suggest fixes. Test the updated app in the Replit preview window after each page addition."