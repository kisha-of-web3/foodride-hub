Implement the following:Homepage:A responsive hero section with a modern design, featuring a location-based search bar (using autocomplete with Google Maps API) and two prominent CTAs: ‘Order Food Now’ and ‘Book a Ride.’Display featured restaurants and ride options based on user location.Include promotional banners for discounts and a testimonial carousel for trust-building.Use a vibrant color scheme (e.g., #FF6347 for food, #4682B4 for rides, #F5F5F5 background) with a clean, professional aesthetic.Food Ordering Section:A restaurant listing page with filters (cuisine, price, delivery time, ratings) and a search function.Menu pages with high-quality images, item descriptions, customization options (e.g., toppings, sizes), and an ‘Add to Cart’ feature.A cart system with real-time updates, allowing users to modify or remove items.Secure checkout with Stripe API for payments (supporting cards and digital wallets).Real-time order tracking using WebSocket or Server-Sent Events for live updates on preparation and delivery.Option to save favorite restaurants or orders in the user’s profile.Ride Booking Section:A booking interface with input fields for pickup and drop-off locations (integrated with Google Maps API for geocoding and directions).Vehicle selection (economy, premium, shared rides) with estimated fare calculations based on distance and vehicle type.Real-time driver tracking using WebSocket for live location updates on a map.Driver profiles with ratings and reviews.Ride history with receipts and downloadable invoices.User Account Dashboard:Secure user authentication using Replit Auth for login/signup, with password hashing (bcrypt) and JWT for session management.Profile management (name, address, saved payment methods via Stripe Customer API).Unified order and ride history with filters and status tracking.Loyalty program with points earned for orders and rides, redeemable for discounts.Notification system for order/ride updates using WebSocket or push notifications.Contact and Support Page:A contact form with validation (name, email, message) and submission to a backend endpoint.FAQ section with collapsible answers for common queries.Optional live chat using a lightweight chatbot API (e.g., Dialogflow or Tawk.to).Technical Requirements:Frontend: Use React.js with Vite for fast builds and Tailwind CSS for responsive, utility-first styling. Ensure mobile-first design with breakpoints for desktop, tablet, and mobile.Backend: Use Node.js with Express.js for RESTful APIs. Implement secure API routes with middleware for authentication (JWT) and input validation (Joi or Zod).Database: Use Replit’s built-in database (or MongoDB if supported) for storing user profiles, orders, rides, and loyalty points. Ensure proper indexing for performance.APIs and Integrations:Stripe API for secure payments and customer management (store API keys in Replit’s secrets).Google Maps API for location services, geocoding, and ride tracking.WebSocket (e.g., Socket.IO) for real-time order and ride updates.Optional: Dialogflow or Tawk.to for chatbot support.Security: Implement HTTPS, sanitize user inputs to prevent XSS/SQL injection, and use environment variables for sensitive data.Performance: Optimize images (use WebP format), enable lazy loading, and minify CSS/JS for faster load times.SEO: Add meta tags, alt text for images, and a sitemap for search engine visibility. Use semantic HTML for accessibility.Testing: Include basic unit tests for critical backend routes (e.g., payment, authentication) using Jest.Deployment: Configure the app for Replit’s one-click deployment with a custom domain option. Ensure production-ready settings (e.g., compression, caching).Design Guidelines:Use Roboto or Inter font for clean typography (16px body, 24px headings).Ensure WCAG 2.1 accessibility (e.g., keyboard navigation, ARIA labels).Optimize for mobile devices with a sticky header and hamburger menu.Use a modular component structure in React for maintainability (e.g., separate components for Cart, MenuItem, RideMap).Additional Notes:Ensure cross-service